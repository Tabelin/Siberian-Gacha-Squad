// CharacterManager.cs
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;

public class CharacterManager : MonoBehaviour
{
    // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    public float moveSpeed = 3f;
    // –†–∞–¥–∏—É—Å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    public float patrolRadius = 2f;

    // –†–∞–¥–∏—É—Å –±–ª–∏–∂–Ω–µ–π –∞—Ç–∞–∫–∏
    private float meleeAttackRange = 2f;  // –†–∞–¥–∏—É—Å –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–∏
    private float rangedAttackRange = 15f; // –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
    public float detectionRadius = 20f; // –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    public float autoGatherRadius = 16f; // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —à–∞—Ö—Ç –∏ –±—É—Ä–æ–≤
    public float gatheringRange = 3f;
    public float maxThrowDistance = 60f; // –¥–∞–ª—å–Ω–æ—Å—Ç—å –∫–∏–¥–∞–Ω–∏—è –≥—Ä–∞–Ω–∞—Ç


    public float meleeAttackCooldown = 1f; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–ª–∏–∂–Ω–µ–π –∞—Ç–∞–∫–∏
    public float rangedAttackCooldown = 2f; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–∏
    private float attackTimer = 0f;
    private float currentAttackCooldown = 0f;
    public float maxStuckTime = 5f; // –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞—Å—Ç—Ä—è–ª
    public float stuckTimer = 0f;
    public float gatherTimer = 0f;
    public float gatherCooldown = 2f; // –í—Ä–µ–º—è –º–µ–∂–¥—É —Å–±–æ—Ä–æ–º
    public float resourceTakeAmount = 20f;
    public float resourceTakeCooldown = 2f;
    public float resourceTakeTimer = 2f;


    float experiencePerResource = 10f;
    float gatherAmountPerAction = 1f;

    private Rigidbody rb;
    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private Vector3 patrolCenter;

    private Vector3 aimTarget;
    private Vector3 currentPatrolTarget;    // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private Vector3 lastPosition;           // –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    private Vector3 moveTarget;             // –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞)


    public bool isPatrolling = true;  // –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    public bool isAttacking = false;  // –ê—Ç–∞–∫–∞
    public bool isGathering = false;  // –î–æ–±—ã—á–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    public bool isIdle = false;       // –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    public bool isControlledByPlayer = false; // –§–ª–∞–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
    public bool isHarvestingDrill = false;
    private bool isThrowingGrenade = false;
    public bool isAimingGrenade = false;

    // –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private Coroutine patrolCoroutine;

    
    private GameObject attackTarget;// –ê—Ç–∞–∫—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
    private GameObject nearestItem;// –ë–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥–±–∏—Ä–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç
    private GameObject targetResource; // –¶–µ–ª—å –¥–æ–±—ã—á–∏
    private GameObject targetDrill; // –¶–µ–ª—å ‚Äî –±—É—Ä
    public GameObject grenadePrefab; // –≥—Ä–∞–Ω–∞—Ç–∞ –ø—Ä–µ—Ñ

    // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞
    private Transform spawnPoint;
   
    public LayerMask enemyLayerMask;   //–ø–æ–∏—Å–∫
    public LayerMask gatherLayerMask;


    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç NavMeshAgent –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
    private UnityEngine.AI.NavMeshAgent navMeshAgent;
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthSystem –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    public HealthSystem healthSystem;
    private CharacterInventory inventory;
   

    void Start()
    {
       


        inventory = GetComponent<CharacterInventory>();
        if (inventory == null)
        {
            inventory = gameObject.AddComponent<CharacterInventory>();
        }
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç NavMeshAgent
        navMeshAgent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        if (navMeshAgent == null)
        {
            Debug.LogError("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç NavMeshAgent –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–¥–æ—Ä–æ–≤—å—è
        healthSystem = GetComponent<HealthSystem>();
        if (healthSystem == null)
        {
            Debug.LogError("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ NavMeshAgent
        // navMeshAgent.speed = moveSpeed;
        // navMeshAgent.stoppingDistance = 0.5f; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        patrolCenter = transform.position;
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        StartPatrolling();

        rb = GetComponent<Rigidbody>();
        lastPosition = transform.position;
    }

    void Update()
    {
        
        if (isHarvestingDrill && targetDrill != null)
        {
            HarvestFromDrill();
        }

        if (isGathering && targetResource != null && isControlledByPlayer == true)
        {

            StopAllActions();
            return;
        }

        if (isGathering && targetResource != null && isAttacking == false)
        {

            GatheringLogic();
            //f
            return;
        }
        else
        {
            // üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            MoveToTarget(moveTarget);
        }

        if (isAttacking == true)
        {
            StopAllActions();
            DetectEnemies(); 
            AttackLogic();
            //f
            return;
        }
        if (isControlledByPlayer == false)
        {
            AutoGatherIfEmpty();

            CheckMoveComplete();
            return;
        }





        if (isGathering && targetDrill != null)      
        {
            targetResource = null;
            isGathering = false;
            
            isControlledByPlayer = false;
        }
        
        if (moveTarget != Vector3.zero)
        {
            float distanceToTarget = Vector3.Distance(transform.position, moveTarget);
            
            if (distanceToTarget < 4f)
            {

                // –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                moveTarget = Vector3.zero;
                isControlledByPlayer = false;

                StartPatrolling();
                return;
            }
            else
            {
                // üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                MoveToTarget(moveTarget);
            }

        }

        if (isControlledByPlayer && moveTarget != Vector3.zero)
        {
            float distanceToTarget = Vector3.Distance(transform.position, moveTarget);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Ü–µ–ª–∏
            float distanceMoved = Vector3.Distance(transform.position, lastPosition);

            if (distanceMoved < 0.02f) // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –Ω—É–ª–µ–≤–æ–µ
            {
                stuckTimer += Time.deltaTime;

                if (stuckTimer >= maxStuckTime)
                {
 
                    isControlledByPlayer = false;
                    moveTarget = Vector3.zero;
                    stuckTimer = 0f;
                    StartPatrolling();
                }
            }
            else
            {
                stuckTimer = 0f; // –°–±—Ä–æ—Å, –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –¥–≤–∏–≥–∞–µ–º—Å—è
            }

            lastPosition = transform.position;
        }

        if (isControlledByPlayer)
        {
            return; // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏–≥—Ä–æ–∫–∞ ‚Üí –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        }

        // üö® –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–∞–≥–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        if (!isAttacking) // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
        {
            DetectEnemies(); // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –≤—Ä–∞–≥–æ–≤ –∏ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –∞—Ç–∞–∫—É

            if (attackTarget != null)
            {
                isAttacking = true;
                isPatrolling = false;
                moveTarget = Vector3.zero; // üß® –°–±—Ä–∞—Å—ã–≤–∞–µ–º moveTarget, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –≤—Ä–∞–≥
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            }
        }
        if (isAttacking && attackTarget != null)
        {
            if (isControlledByPlayer)
            {
                return; // vv
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤ detectionRadius
            if (attackTarget.activeInHierarchy)
            {
                float distanceToTarget = Vector3.Distance(transform.position, attackTarget.transform.position);

                // –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã—à–ª–∞ –∑–∞ detectionRadius ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç–∞–∫—É
                if (distanceToTarget > detectionRadius)
                {
                    StopAttack();
                    
                }
                else if (distanceToTarget > rangedAttackRange)
                {
                    // –ï—Å–ª–∏ —Ü–µ–ª—å –≤–Ω–µ –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–∏ ‚Üí –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –Ω–µ–π
                    MoveToTarget(attackTarget.transform.position);
                    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞—Ç–∞–∫—É, –µ—Å–ª–∏ —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                }
            }
            else
            {
                StopAttack();
                return;
            }
            
            // –ê—Ç–∞–∫–∞, –µ—Å–ª–∏ —Ü–µ–ª—å –≤ –∑–æ–Ω–µ
            AttackLogic();
            DetectEnemies(); // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤
            

        }
        // –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –∞—Ç–∞–∫–∞ –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
        else if (isAttacking && attackTarget == null)
        {
          
            StopAttack();
            return;
        }
        else if (isIdle)
        {
            IdleControl();
        }
        else if (isPatrolling)
        {
            DetectEnemies(); // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Ä–∞–≥–æ–≤ –≤ –ø–∞—Ç—Ä—É–ª–µ
            Patrol(); // –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        }
    }


    public void SetControlledByPlayer(bool controlled)
    {
        isControlledByPlayer = controlled;
    }


    private void HarvestFromDrill()
    {
        if (targetDrill == null || !targetDrill.activeInHierarchy)
        {
            StopHarvestFromDrill();
            return;
        }

        float distanceToDrill = Vector3.Distance(transform.position, targetDrill.transform.position);

        if (distanceToDrill > gatheringRange)
        {
            MoveToTarget(targetDrill.transform.position);
            return;
        }
        else
        {
            navMeshAgent.SetDestination(transform.position); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        }

        AutoDrill drillScript = targetDrill.GetComponent<AutoDrill>();
        if (drillScript == null)
        {
            Debug.LogWarning("–£ —Ü–µ–ª–∏ –Ω–µ—Ç —Å–∫—Ä–∏–ø—Ç–∞ AutoDrill");
            StopHarvestFromDrill();
            return;
        }

        if (!drillScript.HasResources)
        {
            Debug.Log("–ë—É—Ä –ø—É—Å—Ç ‚Üí –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...");
            return;
        }

        resourceTakeTimer += Time.deltaTime;
        if (resourceTakeTimer >= resourceTakeCooldown)
        {
            float amountToTake = resourceTakeAmount;
            float weight;
            float taken = drillScript.TakeResources(amountToTake, out weight);

            if (taken > 0)
            {
                inventory.AddResource(drillScript.resourceType, taken);
                healthSystem.GainExperience(taken * experiencePerResource);
                healthSystem.ShowExperiencePopup(taken * experiencePerResource);
            }

            resourceTakeTimer = 0f;
        }
    }

    public void StopHarvestFromDrill()
    {
        isHarvestingDrill = false;
        targetDrill = null;
        resourceTakeTimer = 0f;

        StartPatrolling(); // –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚Äî –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    }


    private void GatheringLogic()
    {
        if (isControlledByPlayer)
        {
            return; // –Ω–µ–µ–µ –∫–æ–ø–∞—Ç—å —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
        }

        if (targetResource == null || !targetResource.activeInHierarchy)
        {
            StopGathering();
            StartPatrolling();
            return;
        }

        float distanceToResource = Vector3.Distance(transform.position, targetResource.transform.position);

        if (distanceToResource > gatheringRange)
        {
            MoveToTarget(targetResource.transform.position);
            return;
        }
        else
        {
            navMeshAgent.SetDestination(transform.position); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        }

        gatherTimer += Time.deltaTime;

        if (gatherTimer >= gatherCooldown)
        {
            Resource resourceScript = targetResource.GetComponent<Resource>();

            
                float remainingSpace = inventory.GetRemainingSpace();
                float possibleGather = Mathf.Min(remainingSpace / resourceScript.weightPerUnit, gatherAmountPerAction);

                if (possibleGather <= 0)
                {
                    Debug.Log("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω!");
                    StopGathering();
                    StartPatrolling();
                    return;
                }

                float gathered = resourceScript.Gather(possibleGather);
                if (gathered > 0)
                {
                    Debug.Log("—Ä–µ—Å—É—Ä—Å!");
                    inventory.AddResource(resourceScript.resourceType, gathered);
                    float expReward = gathered * experiencePerResource;
                    healthSystem.GainExperience(expReward); // –û–±—ã—á–Ω—ã–π GainExperience
                    healthSystem.ShowExperiencePopup(expReward); // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –∏–∑ HealthSystem
                }


                if (resourceScript.isDepleted)
                {
                    Debug.Log("–†–µ—Å—É—Ä—Å –∏—Å—á–µ—Ä–ø–∞–Ω");
                    StopGathering();
                    StartPatrolling();
                }

                gatherTimer = 0f;
            
        }
    }


    private void StopGathering()
    {
        isGathering = false;
        targetResource = null;
        gatherTimer = 0f;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤
    private void DetectEnemies()
    {
        if (isControlledByPlayer)
        {
            return; // –ù–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –≤—Ä–∞–≥–æ–≤, –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏–≥—Ä–æ–∫–∞
        }


        Collider[] enemies = Physics.OverlapSphere(transform.position, detectionRadius, enemyLayerMask);

        if (enemies.Length == 0)
        {
            if (attackTarget != null)
            {
                StopAttack();
            }
            return; // –ù–µ—Ç –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
        }

        GameObject closestEnemy = null;
        float shortestDistance = Mathf.Infinity;

        foreach (Collider enemy in enemies)
        {
            float distance = Vector3.Distance(transform.position, enemy.transform.position);
            if (distance < shortestDistance)
            {
                shortestDistance = distance;
                closestEnemy = enemy.gameObject;
            }
        }

        if (closestEnemy != null)
        {
            

            attackTarget = closestEnemy;
            isAttacking = true;
            isPatrolling = false;

            // –ï—Å–ª–∏ —Ü–µ–ª—å –≤ detectionRadius, –Ω–æ –≤–Ω–µ rangedAttackRange ‚Üí –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –Ω–µ–π
            float distanceToEnemy = shortestDistance;

            if (distanceToEnemy <= detectionRadius)
            {
                isAttacking = true;

                if (distanceToEnemy > rangedAttackRange)
                {
                    MoveToTarget(attackTarget.transform.position); // –î–≤–∏–≥–∞–µ–º—Å—è –∫ –≤—Ä–∞–≥—É
                }
                else
                {
                    navMeshAgent.SetDestination(transform.position); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                }
            }
        }
    }


    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏
    private void AttackLogic()
    {
        if (isControlledByPlayer)
        {
            return; // –Ω–µ–µ–µ—Ç –∞—Ç–∞–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
        }


        if (attackTarget == null || !attackTarget.activeInHierarchy)
        {
            StopAttack(); // –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç–∞–∫—É
            return;
        }

        float distanceToTarget = Vector3.Distance(transform.position, attackTarget.transform.position);

        // –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã—à–ª–∞ –∑–∞ —Ä–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        if (distanceToTarget > detectionRadius)
        {
            StopAttack();
            return;
        }

        // –ï—Å–ª–∏ –≤—Ä–∞–≥ –≤–Ω–µ –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–∏ ‚Üí –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –Ω–µ–º—É
        if (distanceToTarget > rangedAttackRange)
        {
            MoveToTarget(attackTarget.transform.position);
            attackTimer = 0f;
            return;
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –µ—Å–ª–∏ —Ü–µ–ª—å –≤ –∑–æ–Ω–µ –∞—Ç–∞–∫–∏
        navMeshAgent.SetDestination(transform.position);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∞—Ç–∞–∫–∏
        if (distanceToTarget <= meleeAttackRange)
        {
            currentAttackCooldown = meleeAttackCooldown;
        }
        else if (distanceToTarget <= rangedAttackRange)
        {
            currentAttackCooldown = rangedAttackCooldown;
        }
        else 
        {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
        attackTimer += Time.deltaTime;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        if (attackTimer >= currentAttackCooldown)
        {
            PerformAttack(attackTarget, distanceToTarget);
            attackTimer = 0f;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—Ç–∞–∫–∏
    public void StartAttack(GameObject target)
    {
        ChangeState(() =>
        {
            StopAllActions();

            attackTarget = target;
            isPatrolling = false;
            isAttacking = true;
            isGathering = false;
            isIdle = false;

            attackTimer = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
            Debug.Log($"–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∞–ª –∞—Ç–∞–∫—É: {target.name}");
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    public void StartPatrolling()
    {
      
        {
            StopAllActions();

            isPatrolling = true;
            isAttacking = false;
            isGathering = false;
            isIdle = false;
            isControlledByPlayer = false;

            SelectNewPatrolPoint(); // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            patrolCoroutine = StartCoroutine(PatrolRoutine());
            Debug.Log("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç–∞–∫–∏
    private void PerformAttack(GameObject target, float distanceToTarget)
    {
        Enemy enemy = target.GetComponent<Enemy>();
        if (enemy != null && enemy.healthSystem != null && enemy.healthSystem.isAlive)
        {
            float damage;

            if (distanceToTarget <= meleeAttackRange)
            {
                damage = CalculateDamage(); // –ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞
                Debug.Log($"–ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞! –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {damage:F2}");
            }
            else if (distanceToTarget <= rangedAttackRange)
            {
                damage = CalculateRangedDamage();
                Debug.Log($"–î–∞–ª—å–Ω—é—é –∞—Ç–∞–∫–∞! –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {damage:F2}");
            }
            else
            {
                // –ï—Å–ª–∏ —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                return;
            }

            enemy.healthSystem.TakeDamage(damage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ä–æ–Ω –≤—Ä–∞–≥—É
        }
    }


    // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç –±–ª–∏–∂–Ω–µ–π –∞—Ç–∞–∫–∏
    private float CalculateDamage()
    {
        if (healthSystem == null)
        {
            Debug.LogError("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return 0f;
        }

        return healthSystem.attackPower * 1.5f; // –£—Ä–æ–Ω —Ä–∞–≤–µ–Ω —Å–∏–ª–µ –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    }

    // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–∏
    private float CalculateRangedDamage()
    {
        if (healthSystem == null)
        {
            Debug.LogError("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç HealthSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return 0f;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∏–ª–∏ —à—Ç—Ä–∞—Ñ –∫ –¥–∞–ª—å–Ω–µ–π –∞—Ç–∞–∫–µ
        return healthSystem.attackPower * 1f; // –ü—Ä–∏–º–µ—Ä: –¥–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ —Å–ª–∞–±–µ–µ
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–∏–∂–Ω–µ–π –∞—Ç–∞–∫–∏
    private void StopAttack()
    {
        isAttacking = false;
        attackTarget = null;
        attackTimer = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
        moveTarget = Vector3.zero; // üö´ –°–±—Ä–∞—Å—ã–≤–∞–µ–º moveTarget
        isControlledByPlayer = false;
        if (!isPatrolling && !isGathering && !isIdle)
        {
            StartPatrolling(); // –ï—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç, –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        }
    }

    public void StartGathering(GameObject resource)
    {
        ChangeState(() =>
        {
            StopAllActions();

            targetResource = resource;
            isGathering = true;
            isPatrolling = false;
            isAttacking = false;
            isIdle = false;

            isControlledByPlayer = false; //xm

            Debug.Log($"–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∞–ª –¥–æ–±—ã–≤–∞—Ç—å {resource.name}");
        });
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∑—è—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    public void TakeControl()
    {
        
        {
            StopAllActions();

            isPatrolling = false;
            isAttacking = false;
            isGathering = false;
            isIdle = true;

            Debug.Log("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º!");
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private void ChangeState(System.Action action)
    {
        if (isAttacking || isGathering)
        {
            Debug.LogWarning("–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–Ω—è—Ç –∞—Ç–∞–∫–æ–π. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ç–∞–∫–∏.");
        }

        action?.Invoke();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    private void StopAllActions()
    {
        StopPatrol();
        isAttacking = false;
        isGathering = false;

    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private void StopPatrol()
    {
        if (navMeshAgent != null)
        {
            navMeshAgent.isStopped = true; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ NavMeshAgent
        }

        isPatrolling = false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private void Patrol()
    {
        if (navMeshAgent != null && Vector3.Distance(transform.position, currentPatrolTarget) > 1f)
        {
            navMeshAgent.SetDestination(currentPatrolTarget); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }

    // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private IEnumerator PatrolRoutine()
    {
        while (true)
        {
            if (isPatrolling && moveTarget == Vector3.zero)
            {
                // –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–π–¥–µ—Ç –¥–æ —Ü–µ–ª–∏
                yield return new WaitWhile(() => navMeshAgent.remainingDistance > navMeshAgent.stoppingDistance);

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏
                yield return new WaitForSeconds(1f);

                // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                SelectNewPatrolPoint();
            }
            else
            {
                yield return null;
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    private void SelectNewPatrolPoint()
    {
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        Vector3 randomPoint = patrolCenter + Random.insideUnitSphere * patrolRadius;
        randomPoint.y = patrolCenter.y; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ XZ

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º NavMesh –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ—Ö–æ–¥–∏–º–æ–π —Ç–æ—á–∫–∏
        UnityEngine.AI.NavMesh.SamplePosition(randomPoint, out UnityEngine.AI.NavMeshHit hit, patrolRadius, UnityEngine.AI.NavMesh.AllAreas);
        currentPatrolTarget = hit.position;
        

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è NavMeshAgent
        if (navMeshAgent != null)
        {
            navMeshAgent.SetDestination(currentPatrolTarget); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
            navMeshAgent.isStopped = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
    private void IdleControl()
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ (WASD)
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        if (horizontal != 0 || vertical != 0)
        {
            if (navMeshAgent != null)
            {
                Vector3 movement = (transform.right * horizontal + transform.forward * vertical).normalized;
                navMeshAgent.SetDestination(transform.position + movement); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            }
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NavMeshAgent
    public void MoveToTarget(Vector3 targetPosition)
    {
        if (targetPosition != Vector3.zero)
        {
            moveTarget = targetPosition;

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            StopPatrol();
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è NavMeshAgent
            if (navMeshAgent != null)
            {
                navMeshAgent.SetDestination(targetPosition); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                navMeshAgent.speed = moveSpeed; // –ó–∞–¥–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
                navMeshAgent.isStopped = false; // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                patrolCenter = targetPosition;
 
            }
        }
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    private IEnumerator FindNearestItem()
    {
        while (true)
        {
            if (isPatrolling || isIdle) // –ü–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            {
                GameObject[] items = GameObject.FindGameObjectsWithTag("Item");

                if (items.Length > 0)
                {
                    nearestItem = FindClosestItem(items);

                    if (nearestItem != null)
                    {
                        MoveToItem(nearestItem.transform.position);
                        PickUpItem(nearestItem);
                    }
                }
            }

            yield return new WaitForSeconds(2f); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    private GameObject FindClosestItem(GameObject[] items)
    {
        GameObject closestItem = null;
        float shortestDistance = Mathf.Infinity;

        foreach (GameObject item in items)
        {
            float distance = Vector3.Distance(transform.position, item.transform.position);
            if (distance < shortestDistance)
            {
                shortestDistance = distance;
                closestItem = item;
            }
        }

        return closestItem;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ –ø—Ä–µ–¥–º–µ—Ç—É
    private void MoveToItem(Vector3 targetPosition)
    {
        transform.position = Vector3.MoveTowards(transform.position, targetPosition, moveSpeed * Time.deltaTime);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    private void PickUpItem(GameObject item)
    {
        if (item == null)
        {
            Debug.LogError("–ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è null!");
            return;
        }

        float distanceToItem = Vector3.Distance(transform.position, item.transform.position);
        if (distanceToItem < 1f) // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ
        {
            Destroy(item); // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
            Debug.Log("–ü—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–±—Ä–∞–Ω!");
        }
    }

    public void StartHarvestFromDrill(GameObject drill)
    {
        if (isControlledByPlayer)
        {
            return; // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏–≥—Ä–æ–∫–∞ ‚Üí –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        } 

        if (drill == null) return;

        ChangeState(() =>
        {
            StopAllActions();

            isHarvestingDrill = true;
            targetDrill = drill;

            Debug.Log($"–ù–∞—á–∞—Ç–∞ –¥–æ–±—ã—á–∞ –∏–∑ –±—É—Ä–∞ {drill.name}");
        });
    }
  
    public bool CanAffordDrill(float cost, ResourceType type)
    {
        return inventory.HasResource(type, cost);
    }

    public void PayForResource(float cost, ResourceType type)
    {
        inventory.RemoveResource(type, cost);
    }
    private void AutoGatherIfEmpty()
    {
        
        if (isControlledByPlayer) return; // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏–≥—Ä–æ–∫–∞

        // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2/3 ‚Üí –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º
        //if (inventory.IsCarryingMoreThan(2 / 3f))
        // {
        //    return;
        // }

        // –ò—â–µ–º —à–∞—Ö—Ç—ã –∏ –±—É—Ä—ã –≤ —Ä–∞–¥–∏—É—Å–µ
        Collider[] targets = Physics.OverlapSphere(transform.position, autoGatherRadius, gatherLayerMask);

        if (targets.Length > 0)
        {
            
            GameObject closestTarget = null;
            float minDistance = Mathf.Infinity;

            foreach (var target in targets)
            {
                float distance = Vector3.Distance(transform.position, target.transform.position);
                if (distance < minDistance)
                {
                    minDistance = distance;
                    closestTarget = target.gameObject;
                }
            }

            if (closestTarget != null)
            {
                isPatrolling = false;
                if (closestTarget.CompareTag("Resource"))
                {
                    StartGathering(closestTarget); // –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±—ã—á—É —Å —à–∞—Ö—Ç—ã
                }
                else if (closestTarget.CompareTag("Resource"))
                {
                    StartHarvestFromDrill(closestTarget); // –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å –±—É—Ä–∞
                }
            }
        }
    }
    private void CheckMoveComplete()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª –ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ
        if (navMeshAgent != null && !navMeshAgent.pathPending)
        {
            float remainingDistance = navMeshAgent.remainingDistance;
            float stoppingDistance = navMeshAgent.stoppingDistance;

            // –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤ —Ç–æ—á–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            if (remainingDistance <= stoppingDistance + 0.1f)
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º moveTarget –∏ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–µ
                isControlledByPlayer = false;
                moveTarget = Vector3.zero;
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–æ–æ–±—â–µ
        if (navMeshAgent.velocity.magnitude < 0.1f && navMeshAgent.remainingDistance < 0.2f)
        {
            Debug.Log("–ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è ‚Üí –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            isControlledByPlayer = false;
            moveTarget = Vector3.zero;
            StartPatrolling();
        }
    }

    public void ThrowGrenade(Vector3 target)
    {
        if (isControlledByPlayer || isThrowingGrenade) return;

        isThrowingGrenade = true;

        Vector3 spawnPos = transform.position + Vector3.up * 1.5f;

        GameObject grenadeGO = Instantiate(grenadePrefab, spawnPos, Quaternion.identity);
        Grenade grenade = grenadeGO.GetComponent<Grenade>();

        if (grenade != null)
        {
            grenade.Launch(target);
        }

        StartCoroutine(ResetThrowState());
    }

    private IEnumerator ResetThrowState()
    {
        yield return new WaitForSeconds(2f); // –í—Ä–µ–º—è –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
        isThrowingGrenade = false;
    }

    public void StartAimGrenade()
    {
       // if (isControlledByPlayer) return;

        isAimingGrenade = true;
        navMeshAgent.isStopped = true; // ‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    }

    public void ReleaseGrenade(Vector3 target)
    {
        float distance = Vector3.Distance(transform.position, target);
        if (distance > maxThrowDistance)
        {
            Debug.Log($"üí• –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∞: {distance:F2} > {maxThrowDistance}");
            isAimingGrenade = false;
            navMeshAgent.isStopped = false;
            return;
        }

        if (grenadePrefab != null)
        {
            Vector3 spawnPos = transform.position + Vector3.up * 1.5f;
            GameObject grenadeGO = Instantiate(grenadePrefab, spawnPos, Quaternion.identity);
            Grenade grenadeScript = grenadeGO.GetComponent<Grenade>();
            if (grenadeScript != null)
            {
                grenadeScript.Launch(target);
            }
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        isAimingGrenade = false;
        navMeshAgent.isStopped = false;
    }
}